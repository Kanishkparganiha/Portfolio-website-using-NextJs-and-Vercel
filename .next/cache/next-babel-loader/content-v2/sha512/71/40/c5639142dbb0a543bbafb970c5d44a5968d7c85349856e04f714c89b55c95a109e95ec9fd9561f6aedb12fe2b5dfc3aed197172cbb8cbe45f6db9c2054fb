{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Particles from \"react-particles-js\";\n\nclass Canvas extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      width: \"0px\",\n      height: \"0px\"\n    });\n\n    _defineProperty(this, \"updateWindowDimensions\", () => {\n      this.setState({\n        width: `${window.innerWidth}px`,\n        height: `${window.innerHeight}px`\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  render() {\n    const {\n      width,\n      height\n    } = this.state;\n    console.log(width, height);\n    return /*#__PURE__*/_jsx(Particles, _objectSpread(_objectSpread({}, this.state), {}, {\n      params: {\n        particles: {\n          number: {\n            value: 30,\n            density: {\n              enable: true,\n              value_area: 800\n            }\n          },\n          color: {\n            value: \"#ffffff\"\n          },\n          shape: {\n            type: \"circle\",\n            stroke: {\n              width: 0,\n              color: \"#000000\"\n            },\n            image: {\n              src: \"img/github.svg\",\n              width: 100,\n              height: 100\n            }\n          },\n          opacity: {\n            value: 0.4,\n            random: true,\n            anim: {\n              enable: true,\n              speed: 1,\n              opacity_min: 0.1,\n              sync: false\n            }\n          },\n          size: {\n            value: 3,\n            random: true,\n            anim: {\n              enable: true,\n              speed: 2,\n              size_min: 0.1,\n              sync: false\n            }\n          },\n          line_linked: {\n            enable_auto: true,\n            distance: 100,\n            color: \"#fff\",\n            opacity: 1,\n            width: 1,\n            condensed_mode: {\n              enable: false,\n              rotateX: 600,\n              rotateY: 600\n            }\n          },\n          move: {\n            enable: true,\n            speed: 1,\n            direction: \"none\",\n            random: false,\n            straight: false,\n            out_mode: \"out\",\n            bounce: false,\n            attract: {\n              enable: false,\n              rotateX: 600,\n              rotateY: 1200\n            }\n          }\n        },\n        interactivity: {\n          detect_on: \"canvas\",\n          events: {\n            onhover: {\n              enable: false\n            },\n            onclick: {\n              enable: false\n            },\n            resize: true\n          }\n        },\n        retina_detect: true\n      }\n    }));\n  }\n\n}\n\nexport default Canvas;","map":null,"metadata":{},"sourceType":"module"}